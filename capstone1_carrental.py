# -*- coding: utf-8 -*-
"""CAPSTONE1_CarRental.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rwc2Cj0ZNau-qJSaWG2mSCtZTz44OtCT
"""

from tabulate import tabulate
import datetime
import sys

# Sample car data with more options
cars = {
    "Sedan": [
        {"name": "Toyota Corolla", "price_per_day": 50, "is_available": True},
        {"name": "Honda Civic", "price_per_day": 55, "is_available": True},
        {"name": "Hyundai Elantra", "price_per_day": 52, "is_available": True},
        {"name": "Kia Cerato", "price_per_day": 54, "is_available": True},
        {"name": "Mazda 3", "price_per_day": 56, "is_available": True},
        {"name": "Nissan Sentra", "price_per_day": 53, "is_available": True},
        {"name": "Volkswagen Jetta", "price_per_day": 57, "is_available": True},
        {"name": "Ford Focus", "price_per_day": 51, "is_available": True},
        {"name": "Chevrolet Cruze", "price_per_day": 55, "is_available": True},
        {"name": "Subaru Impreza", "price_per_day": 58, "is_available": True}
    ],
    "SUV": [
        {"name": "Toyota RAV4", "price_per_day": 80, "is_available": True},
        {"name": "Honda CR-V", "price_per_day": 85, "is_available": True},
        {"name": "Mazda CX-5", "price_per_day": 82, "is_available": True},
        {"name": "Hyundai Tucson", "price_per_day": 81, "is_available": True},
        {"name": "Kia Sportage", "price_per_day": 83, "is_available": True},
        {"name": "Ford Escape", "price_per_day": 84, "is_available": True},
        {"name": "Nissan Rogue", "price_per_day": 86, "is_available": True},
        {"name": "Chevrolet Equinox", "price_per_day": 85, "is_available": True},
        {"name": "Volkswagen Tiguan", "price_per_day": 87, "is_available": True},
        {"name": "Subaru Forester", "price_per_day": 88, "is_available": True}
    ],
    "Luxury": [
        {"name": "BMW 5 Series", "price_per_day": 150, "is_available": True},
        {"name": "Mercedes E-Class", "price_per_day": 160, "is_available": True},
        {"name": "Audi A6", "price_per_day": 155, "is_available": True},
        {"name": "Lexus ES", "price_per_day": 158, "is_available": True},
        {"name": "Jaguar XF", "price_per_day": 162, "is_available": True},
        {"name": "Tesla Model S", "price_per_day": 165, "is_available": True},
        {"name": "Volvo S90", "price_per_day": 159, "is_available": True},
        {"name": "Infiniti Q50", "price_per_day": 157, "is_available": True},
        {"name": "Cadillac CT5", "price_per_day": 161, "is_available": True},
        {"name": "Genesis G80", "price_per_day": 163, "is_available": True}
    ]
}

# Realistic add-ons for rental cars
add_ons = [
    {"name": "GPS Navigation", "price": 5},
    {"name": "Child Safety Seat", "price": 7},
    {"name": "Additional Insurance", "price": 10},
    {"name": "Roadside Assistance", "price": 8},
    {"name": "Additional Driver", "price": 12},
    {"name": "WiFi Hotspot", "price": 6},
    {"name": "Fuel Prepayment", "price": 15},
    {"name": "Ski or Bike Rack", "price": 9},
    {"name": "Pet Seat Cover", "price": 7},
    {"name": "Luxury Cleaning Package", "price": 10}
]

# Rental cart to store selected cars and their details
rental_cart = []

# Function to calculate the total cost of the rental cart
def calculate_total():
    total = 0
    for item in rental_cart:
        # Calculate subtotal including add-ons for each car
        subtotal = item['days'] * item['price_per_day'] + sum(addon['price'] * item['days'] for addon in item.get('addons', []))
        total += subtotal  # Add to overall total
    return total

# Function to display the rental cart
def display_cart():
    if not rental_cart:
        print("\nYour rental cart is empty")
        return

    table = []
    for i, item in enumerate(rental_cart, 1):
        # Prepare list of add-ons for display
        addons_list = ", ".join([addon['name'] for addon in item.get('addons', [])]) if item.get('addons') else "None"
        # Calculate subtotal for this car including add-ons
        subtotal = item['days'] * item['price_per_day'] + sum(addon['price'] * item['days'] for addon in item.get('addons', []))
        table.append([i, item['name'], item['category'], item['days'], f"${item['price_per_day']}", addons_list, f"${subtotal}"])

    # Display cart in table format
    print("\nYour rental cart")
    print(tabulate(table, headers=["No", "Car", "Category", "Days", "Price per Day", "Add-ons", "Subtotal"], tablefmt="double_grid"))

# Function to select a car category
def select_category():
    while True:
        print("\nSelect Car Category")
        print("0. Back to Main Menu")
        for i, category in enumerate(cars, 1):
            print(f"{i}. {category}")
        try:
            choice = int(input("Enter category number: "))
            if choice == 0:
                break  # Go back to main menu
            selected_category = list(cars.keys())[choice-1]
            select_car(selected_category)  # Call function to select car
        except (ValueError, IndexError):
            print("Invalid input")

# Function to select a car from a category
def select_car(category):
    # Filter only available cars
    available_cars = [car for car in cars[category] if car['is_available']]
    if not available_cars:
        print("No available cars in this category")
        return

    while True:
        print(f"\nAvailable Cars in {category}")
        print("0. Back to category list")
        table = []
        for i, car in enumerate(available_cars, 1):
            table.append([i, car['name'], f"${car['price_per_day']}", "Available" if car['is_available'] else "Rented"])
        print(tabulate(table, headers=["No", "Car Name", "Price per Day", "Status"], tablefmt="fancy_grid"))

        try:
            index = int(input("Select a car number to rent: ")) - 1
            if index == -1:
                break  # Go back to category selection
            car = available_cars[index]
            days = int(input("How many days do you want to rent: "))
            if days <= 0:
                print("Days must be greater than 0")
                continue

            # Add car to cart and mark as rented
            rental_cart.append({"category": category, "name": car['name'], "price_per_day": car['price_per_day'], "days": days})
            car['is_available'] = False
            print(f"{car['name']} added to rental cart")
            break
        except (ValueError, IndexError):
            print("Invalid input")

# Function to remove a car from the cart
def remove_car():
    if not rental_cart:
        print("Your rental cart is empty")
        return

    display_cart()
    print("0. Back to Main Menu")
    try:
        index = int(input("Select item number to remove: "))
        if index == 0:
            return
        index -= 1
        if 0 <= index < len(rental_cart):
            removed = rental_cart.pop(index)  # Remove selected car
            # Make the car available again
            for car in cars[removed['category']]:
                if car['name'] == removed['name']:
                    car['is_available'] = True
                    break
            print(f"{removed['name']} removed from rental cart")
        else:
            print("Invalid number")
    except ValueError:
        print("Invalid input")

# Function to update the number of rental days for a car
def update_rental():
    display_cart()
    if not rental_cart:
        return
    try:
        index = int(input("Select item number to update (0 to go back): ")) - 1
        if index == -1:
            return
        if 0 <= index < len(rental_cart):
            days = int(input("Enter new number of days: "))
            if days <= 0:
                print("Days must be greater than 0")
                return
            rental_cart[index]['days'] = days  # Update the rental days
            print(f"{rental_cart[index]['name']} rental days updated")
        else:
            print("Invalid number")
    except ValueError:
        print("Invalid input")

# Function to select add-ons for cars
def add_ons_menu():
    if not rental_cart:
        print("Your rental cart is empty")
        return

    selected_addons = []
    for idx, item in enumerate(rental_cart):
        print(f"\nSelect add-ons for {item['name']}")
        for i, addon in enumerate(add_ons, 1):
            print(f"{i}. {addon['name']} (${addon['price']} per day)")
        print("0. No add-ons")
        choice = input("Select add-on number or 0 for none: ")
        try:
            choice = int(choice)
            if choice == 0:
                selected_addons.append([])  # No add-ons selected
            elif 1 <= choice <= len(add_ons):
                selected_addons.append([add_ons[choice-1]])  # Add selected add-on
            else:
                print("Invalid choice. No add-ons selected")
                selected_addons.append([])
        except ValueError:
            print("Invalid input. No add-ons selected")
            selected_addons.append([])

    # Assign selected add-ons to each car in the cart
    for idx, item in enumerate(rental_cart):
        item['addons'] = selected_addons[idx]

    display_cart()
    total = calculate_total()
    print(f"\nTotal rental cost including add-ons: ${total}")

# Main menu to choose options
def main_menu():
    while True:
        total = calculate_total()
        print(f"\nCar Rental Menu (Current Total: ${total})")
        print("1. View Rental Cart")
        print("2. Add Car")
        print("3. Remove Car from Cart")
        print("4. Update Rental Days")
        print("5. Add-Ons")
        print("6. Checkout")

        choice = input("Choose an option 1 to 6: ")

        if choice == "1":
            display_cart()
        elif choice == "2":
            select_category()
        elif choice == "3":
            remove_car()
        elif choice == "4":
            update_rental()
        elif choice == "5":
            add_ons_menu()
        elif choice == "6":
            print("Thank you for using our car rental service!")
            break
        else:
            print("Invalid choice")

# Run the program
if __name__ == "__main__":
    main_menu()\